# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'App.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os
from app_ui_1 import Ui_WeldingDefectDetection  # Import the sub_window module

class Ui_WeldingDefectDetection(object):
    def setupUi(self, WeldingDefectDetection):
        WeldingDefectDetection.setObjectName("WeldingDefectDetection")
        WeldingDefectDetection.resize(1173, 825)
        self.centralwidget = QtWidgets.QWidget(WeldingDefectDetection)
        self.centralwidget.setObjectName("centralwidget")

        self.ListPhotoGallery = QtWidgets.QScrollArea(self.centralwidget)
        self.ListPhotoGallery.setGeometry(QtCore.QRect(0, 0, 211, 781))
        self.ListPhotoGallery.setWidgetResizable(True)
        self.ListPhotoGallery.setObjectName("ListPhotoGallery")

        self.scrollAreaWidgetContents_1 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_1.setGeometry(QtCore.QRect(0, 0, 209, 779))
        self.scrollAreaWidgetContents_1.setObjectName("scrollAreaWidgetContents_1")
        
        self.imageListLayout = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_1)

        self.BoxList1 = QtWidgets.QListView(self.scrollAreaWidgetContents_1)
        self.BoxList1.setGeometry(QtCore.QRect(0, 0, 209, 781))
        self.BoxList1.setObjectName("BoxList1")
        self.ListPhotoGallery.setWidget(self.scrollAreaWidgetContents_1)
        self.ListBoundingBoxRightUpper = QtWidgets.QScrollArea(self.centralwidget)
        self.ListBoundingBoxRightUpper.setGeometry(QtCore.QRect(960, 40, 211, 351))
        self.ListBoundingBoxRightUpper.setWidgetResizable(True)
        self.ListBoundingBoxRightUpper.setObjectName("ListBoundingBoxRightUpper")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 209, 349))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.BoxList2 = QtWidgets.QListView(self.scrollAreaWidgetContents_2)
        self.BoxList2.setGeometry(QtCore.QRect(0, 0, 209, 351))
        self.BoxList2.setObjectName("BoxList2")
        self.ListBoundingBoxRightUpper.setWidget(self.scrollAreaWidgetContents_2)
        self.ListBoundingBoxRightLower = QtWidgets.QScrollArea(self.centralwidget)
        self.ListBoundingBoxRightLower.setGeometry(QtCore.QRect(960, 430, 211, 351))
        self.ListBoundingBoxRightLower.setWidgetResizable(True)
        self.ListBoundingBoxRightLower.setObjectName("ListBoundingBoxRightLower")
        self.scrollAreaWidgetContents_3 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_3.setGeometry(QtCore.QRect(0, 0, 209, 349))
        self.scrollAreaWidgetContents_3.setObjectName("scrollAreaWidgetContents_3")
        self.BoxList3 = QtWidgets.QListView(self.scrollAreaWidgetContents_3)
        self.BoxList3.setGeometry(QtCore.QRect(0, 0, 209, 351))
        self.BoxList3.setObjectName("BoxList3")
        self.ListBoundingBoxRightLower.setWidget(self.scrollAreaWidgetContents_3)
        self.ButtonCopy = QtWidgets.QPushButton(self.centralwidget)
        self.ButtonCopy.setGeometry(QtCore.QRect(970, 400, 91, 23))
        self.ButtonCopy.setObjectName("ButtonCopy")
        self.ButtonDelete = QtWidgets.QPushButton(self.centralwidget)
        self.ButtonDelete.setGeometry(QtCore.QRect(1070, 400, 91, 23))
        self.ButtonDelete.setObjectName("ButtonDelete")
        self.TextBoundingBox = QtWidgets.QLabel(self.centralwidget)
        self.TextBoundingBox.setGeometry(QtCore.QRect(960, -1, 211, 41))
        self.TextBoundingBox.setAlignment(QtCore.Qt.AlignCenter)
        self.TextBoundingBox.setObjectName("TextBoundingBox")
        self.TextFileName = QtWidgets.QLabel(self.centralwidget)
        self.TextFileName.setGeometry(QtCore.QRect(240, -1, 721, 41))
        self.TextFileName.setAlignment(QtCore.Qt.AlignCenter)
        self.TextFileName.setObjectName("TextFileName")
        self.BoxOriginalImage = QtWidgets.QLabel(self.centralwidget)
        self.BoxOriginalImage.setGeometry(QtCore.QRect(220, 40, 361, 351))
        self.BoxOriginalImage.setStyleSheet("QLabel {\n"
"    border: 0.5px solid black;  /* Border thickness and color */\n"
"    border-radius: 5px;       /* Optional: Rounded corners */\n"
"    padding: 5px;             /* Optional: Space inside the border */\n"
"}\n"
"")
        self.BoxOriginalImage.setObjectName("BoxOriginalImage")
        self.BoxDetectedImage = QtWidgets.QLabel(self.centralwidget)
        self.BoxDetectedImage.setGeometry(QtCore.QRect(590, 40, 361, 351))
        self.BoxDetectedImage.setStyleSheet("QLabel {\n"
"    border: 0.5px solid black;  /* Border thickness and color */\n"
"    border-radius: 5px;       /* Optional: Rounded corners */\n"
"    padding: 5px;             /* Optional: Space inside the border */\n"
"}\n"
"")
        self.BoxDetectedImage.setObjectName("BoxDetectedImage")
        self.BoxMetadataImage = QtWidgets.QLabel(self.centralwidget)
        self.BoxMetadataImage.setGeometry(QtCore.QRect(220, 430, 361, 351))
        self.BoxMetadataImage.setStyleSheet("QLabel {\n"
"    border: 0.5px solid black;  /* Border thickness and color */\n"
"    border-radius: 5px;       /* Optional: Rounded corners */\n"
"    padding: 5px;             /* Optional: Space inside the border */\n"
"}\n"
"")
        self.BoxMetadataImage.setObjectName("BoxMetadataImage")
        self.BoxEditImage = QtWidgets.QLabel(self.centralwidget)
        self.BoxEditImage.setGeometry(QtCore.QRect(590, 430, 361, 351))
        self.BoxEditImage.setStyleSheet("QLabel {\n"
"    border: 0.5px solid black;  /* Border thickness and color */\n"
"    border-radius: 5px;       /* Optional: Rounded corners */\n"
"    padding: 5px;             /* Optional: Space inside the border */\n"
"}\n"
"")
        self.BoxEditImage.setObjectName("BoxEditImage")
        self.ButtonSelectModel = QtWidgets.QComboBox(self.centralwidget)
        self.ButtonSelectModel.setGeometry(QtCore.QRect(220, 400, 211, 23))
        self.ButtonSelectModel.setObjectName("ButtonSelectModel")
        self.ButtonSelectModel.addItem("")
        self.ButtonSelectModel.addItem("")
        self.ButtonSelectModel.addItem("")
        self.ButtonDetectDefect = QtWidgets.QPushButton(self.centralwidget)
        self.ButtonDetectDefect.setGeometry(QtCore.QRect(440, 400, 141, 23))
        self.ButtonDetectDefect.setObjectName("ButtonDetectDefect")
        self.ButtonEditImage = QtWidgets.QRadioButton(self.centralwidget)
        self.ButtonEditImage.setGeometry(QtCore.QRect(600, 400, 99, 21))
        self.ButtonEditImage.setObjectName("ButtonEditImage")
        self.ButtonMaximize1 = QtWidgets.QPushButton(self.centralwidget)
        self.ButtonMaximize1.setGeometry(QtCore.QRect(550, 50, 21, 23))
        self.ButtonMaximize1.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("Assets/icons8-fullscreen-16.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ButtonMaximize1.setIcon(icon)
        self.ButtonMaximize1.setObjectName("ButtonMaximize1")
        self.ButtonMaximize2 = QtWidgets.QPushButton(self.centralwidget)
        self.ButtonMaximize2.setGeometry(QtCore.QRect(920, 50, 21, 23))
        self.ButtonMaximize2.setText("")
        self.ButtonMaximize2.setIcon(icon)
        self.ButtonMaximize2.setObjectName("ButtonMaximize2")
        self.ButtonMaximize3 = QtWidgets.QPushButton(self.centralwidget)
        self.ButtonMaximize3.setGeometry(QtCore.QRect(920, 440, 21, 23))
        self.ButtonMaximize3.setText("")
        self.ButtonMaximize3.setIcon(icon)
        self.ButtonMaximize3.setObjectName("ButtonMaximize3")
        self.ButtonMaximize4 = QtWidgets.QPushButton(self.centralwidget)
        self.ButtonMaximize4.setGeometry(QtCore.QRect(550, 440, 21, 23))
        self.ButtonMaximize4.setText("")
        self.ButtonMaximize4.setIcon(icon)
        self.ButtonMaximize4.setObjectName("ButtonMaximize4")
        WeldingDefectDetection.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(WeldingDefectDetection)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1173, 20))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuGenerateReport = QtWidgets.QMenu(self.menubar)
        self.menuGenerateReport.setObjectName("menuGenerateReport")
        WeldingDefectDetection.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(WeldingDefectDetection)
        self.statusbar.setObjectName("statusbar")
        WeldingDefectDetection.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(WeldingDefectDetection)
        self.actionOpen.setObjectName("actionOpen")
        self.menuFile.addAction(self.actionOpen)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuGenerateReport.menuAction())

        # Connect Open Action to Function
        self.actionOpen.triggered.connect(self.open_directory)
        self.ButtonMaximize1.clicked.connect(self.maximize_image)
        self.ButtonMaximize2.clicked.connect(self.maximize_image)
        self.ButtonMaximize3.clicked.connect(self.open_sub_window)  # Connect ButtonMaximize3 to open_sub_window
        self.ButtonMaximize4.clicked.connect(self.maximize_image)
        self.ListPhotoGallery.verticalScrollBar().valueChanged.connect(self.on_scroll)
        self.image_paths = []
        self.loaded_images_count = 0
        self.chunk_size = 20

        self.retranslateUi(WeldingDefectDetection)
        QtCore.QMetaObject.connectSlotsByName(WeldingDefectDetection)

    def retranslateUi(self, WeldingDefectDetection):
        _translate = QtCore.QCoreApplication.translate
        WeldingDefectDetection.setWindowTitle(_translate("WeldingDefectDetection", "Welding Defect Detection"))
        self.ButtonCopy.setText(_translate("WeldingDefectDetection", "Copy"))
        self.ButtonDelete.setText(_translate("WeldingDefectDetection", "Delete"))
        self.TextBoundingBox.setText(_translate("WeldingDefectDetection", "Bounding Boxes"))
        self.TextFileName.setText(_translate("WeldingDefectDetection", "FileName"))
        self.BoxOriginalImage.setText(_translate("WeldingDefectDetection", "TextLabel"))
        self.BoxDetectedImage.setText(_translate("WeldingDefectDetection", "TextLabel"))
        self.BoxMetadataImage.setText(_translate("WeldingDefectDetection", "TextLabel"))
        self.BoxEditImage.setText(_translate("WeldingDefectDetection", "TextLabel"))
        self.ButtonSelectModel.setItemText(0, _translate("WeldingDefectDetection", "Model1"))
        self.ButtonSelectModel.setItemText(1, _translate("WeldingDefectDetection", "Model2"))
        self.ButtonSelectModel.setItemText(2, _translate("WeldingDefectDetection", "Model3"))
        self.ButtonDetectDefect.setText(_translate("WeldingDefectDetection", "Detect Defects"))
        self.ButtonEditImage.setText(_translate("WeldingDefectDetection", "Edit"))
        self.menuFile.setTitle(_translate("WeldingDefectDetection", "File"))
        self.menuGenerateReport.setTitle(_translate("WeldingDefectDetection", "Generate Report"))
        self.actionOpen.setText(_translate("WeldingDefectDetection", "Open"))
    
    def open_directory(self):
        """Opens a directory and loads image thumbnails in ListPhotoGallery."""
        folder = QtWidgets.QFileDialog.getExistingDirectory(None, "Select Folder")
        if folder:
            self.load_images(folder)
    
    def load_images(self, folder):
        """Loads image thumbnails from the selected folder."""
        # Clear previous thumbnails
        while self.imageListLayout.count():
            child = self.imageListLayout.takeAt(0)
            if child.widget():
                child.widget().deleteLater()
        
        # Supported image formats
        image_extensions = {'.png', '.jpg', '.jpeg', '.bmp', '.gif'}
        self.image_paths = [os.path.join(folder, filename) for filename in os.listdir(folder)
                            if any(filename.lower().endswith(ext) for ext in image_extensions)]
        self.loaded_images_count = 0
        self.load_next_chunk()
        
        # for filename in os.listdir(folder):
        #     if any(filename.lower().endswith(ext) for ext in image_extensions):
        #         image_path = os.path.join(folder, filename)
        #         self.add_thumbnail(image_path)

    def load_next_chunk(self):
        """Loads the next chunk of images."""
        for _ in range(self.chunk_size):
            if self.loaded_images_count < len(self.image_paths):
                image_path = self.image_paths[self.loaded_images_count]
                self.add_thumbnail(image_path)
                self.loaded_images_count += 1
    
    def add_thumbnail(self, image_path):
        """Adds a thumbnail to ListPhotoGallery."""
        pixmap = QtGui.QPixmap(image_path)
        pixmap = pixmap.scaled(180, 180, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation)
        
        label = QtWidgets.QLabel()
        label.setPixmap(pixmap)
        label.setAlignment(QtCore.Qt.AlignCenter)
        label.mousePressEvent = lambda event, path=image_path: self.show_image_in_box(path)
        self.imageListLayout.addWidget(label)

    def show_image_in_box(self, image_path):
        """Displays the selected image in BoxOriginalImage."""
        self.current_image_path = image_path
        pixmap = QtGui.QPixmap(image_path)
        pixmap = pixmap.scaled(self.BoxOriginalImage.width(), self.BoxOriginalImage.height(), QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation)
        self.BoxOriginalImage.setPixmap(pixmap)

        # Update the TextFileName label with the file name and path
        file_name = os.path.basename(image_path)
        path = os.path.dirname(image_path)
        self.TextFileName.setText(f"{path} ({file_name})")

    def on_scroll(self):
        """Loads more images when scrolled to the bottom."""
        if self.ListPhotoGallery.verticalScrollBar().value() == self.ListPhotoGallery.verticalScrollBar().maximum():
            self.load_next_chunk()

    def maximize_image(self):
        """Displays the current image in full screen mode."""
        if hasattr(self, 'current_image_path'):
            self.fullscreen_window = QtWidgets.QWidget()
            self.fullscreen_window.setWindowFlags(QtCore.Qt.Window | QtCore.Qt.FramelessWindowHint)
            self.fullscreen_window.showFullScreen()

            layout = QtWidgets.QVBoxLayout(self.fullscreen_window)
            label = QtWidgets.QLabel()
            pixmap = QtGui.QPixmap(self.current_image_path)
            label.setPixmap(pixmap)
            label.setAlignment(QtCore.Qt.AlignCenter)
            layout.addWidget(label)

            # Add close and resize buttons
            button_layout = QtWidgets.QHBoxLayout()
            close_button = QtWidgets.QPushButton("Close")
            close_button.clicked.connect(self.close_fullscreen)
            resize_button = QtWidgets.QPushButton("Resize")
            resize_button.clicked.connect(self.resize_fullscreen)
            button_layout.addWidget(close_button)
            button_layout.addWidget(resize_button)
            layout.addLayout(button_layout)

            self.fullscreen_window.show()

    def close_fullscreen(self):
        """Closes the full screen window."""
        self.fullscreen_window.close()

    def resize_fullscreen(self):
        """Resizes the full screen window to a normal window."""
        self.fullscreen_window.showNormal()
    
    def open_sub_window(self):
        """Opens the sub_window GUI."""
        self.sub_window = QtWidgets.QMainWindow()
        self.ui = Ui_WeldingDefectDetection()
        self.ui.setupUi(self.sub_window)
        self.sub_window.show()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    WeldingDefectDetection = QtWidgets.QMainWindow()
    ui = Ui_WeldingDefectDetection()
    ui.setupUi(WeldingDefectDetection)
    WeldingDefectDetection.show()
    sys.exit(app.exec_())
